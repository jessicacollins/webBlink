/*
 * This is a minimal example, see extra-examples.cpp for a version
 * with more explantory documentation, example routines, how to 
 * hook up your pixels and all of the pixel types that are supported.
 *
 */

#include "application.h"
//#include "spark_disable_wlan.h" // For faster local debugging only
#include "neopixel/neopixel.h"

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_PIN D2
#define PIXEL_COUNT 26
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

int count = 0;

boolean left = true;

void setup() 
{
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}
void loop() 
{
  //rainbow(20);
  //rainbowCycle(30);
  
  if(count==0){
      if(left){
        ledsOff(50); // Off 
        colorWipeLeft(strip.Color(0, 0, 255), 50); // Green
      }else{
        ledsOff(50); // Off 
        colorWipeRight(strip.Color(0, 0, 255), 50); // Green
      }
  }else if(count == 1){
      if(left){
        ledsOff(50); // Off 
         colorWipeLeft(strip.Color(255, 0, 0), 50); // Blue    
      }else{
        ledsOff(50); // Off 
        colorWipeRight(strip.Color(255, 0, 0), 50); // Blue    
      }
  }else if(count == 2){
      if(left){
        ledsOff(50); // Off 
         colorWipeLeft(strip.Color(0, 255, 0), 50); // Red    
      }else{
        ledsOff(50); // Off 
        colorWipeRight(strip.Color(0, 255, 0), 50); // Red    
      }
  }
  if(count==2){
      count = 0;
  }else{
      count++;
  }
  left = !left;
}

// Fill the dots one after the other with a color, wait (ms) after each one
void colorWipeRight(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void colorWipeLeft(uint32_t c, uint8_t wait) {
  for(uint16_t i=strip.numPixels()-1; i > 0; i--) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void ledsOff(uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, strip.Color(0, 0, 0));
  }
  strip.show();
  delay(wait);
}

void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
